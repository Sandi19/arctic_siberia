generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String
  password          String
  avatar            String?
  role              UserRole      @default(STUDENT)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  certificates      Certificate[]
  instructedCourses Course[]      @relation("CourseInstructor")
  enrollments       Enrollment[]
  payments          Payment[]
  progress          Progress[]
  reviews           Review[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("categories")
}

model Course {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  description   String
  shortDesc     String?
  thumbnail     String?
  price         Decimal         @default(0)
  originalPrice Decimal?
  status        CourseStatus    @default(DRAFT)
  level         DifficultyLevel @default(BEGINNER)
  duration      Int?
  language      String          @default("ru")
  isPublished   Boolean         @default(false)
  isFeatured    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  instructorId  String
  categoryId    String
  certificates  Certificate[]
  category      Category        @relation(fields: [categoryId], references: [id])
  instructor    User            @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments   Enrollment[]
  lessons       Lesson[]
  payments      Payment[]
  reviews       Review[]

  @@map("courses")
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  slug        String
  description String?
  content     String?
  videoUrl    String?
  duration    Int?
  order       Int        @default(0)
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  materials   Material[]
  progress    Progress[]

  @@unique([courseId, slug])
  @@map("lessons")
}

model Material {
  id        String   @id @default(cuid())
  title     String
  filename  String
  fileUrl   String
  fileSize  Int?
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("materials")
}

model Enrollment {
  id                String    @id @default(cuid())
  enrolledAt        DateTime  @default(now())
  completedAt       DateTime?
  progress          Float     @default(0)
  isCompleted       Boolean   @default(false)
  certificateIssued Boolean   @default(false)
  userId            String
  courseId          String
  course            Course    @relation(fields: [courseId], references: [id])
  user              User      @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id              String    @id @default(cuid())
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  watchedDuration Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  lessonId        String
  lesson          Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@map("progress")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal
  currency      String        @default("IDR")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  courseId      String
  course        Course        @relation(fields: [courseId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("reviews")
}

model Certificate {
  id                String   @id @default(cuid())
  certificateNumber String   @unique
  issuedAt          DateTime @default(now())
  userId            String
  courseId          String
  course            Course   @relation(fields: [courseId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("certificates")
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
