// File: prisma/schema.prisma
// Clean schema untuk Course Builder + Session Management - NO DUPLICATES

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String
  password          String
  avatar            String?
  role              UserRole      @default(STUDENT)
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  instructedCourses Course[]               @relation("CourseInstructor")
  enrollments       Enrollment[]
  payments          Payment[]
  progress          Progress[]
  reviews           Review[]
  certificates      Certificate[]
  instructorSettings InstructorSettings?
  quizAttempts      QuizAttempt[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("categories")
}

model Course {
  id            String          @id @default(cuid())
  title         String
  slug          String          @unique
  description   String
  shortDesc     String?
  thumbnail     String?
  trailerUrl    String?         // YouTube trailer URL
  price         Decimal         @default(0) @db.Decimal(10, 2)
  originalPrice Decimal?        @db.Decimal(10, 2)
  status        CourseStatus    @default(DRAFT)
  level         DifficultyLevel @default(BEGINNER)
  duration      Int?            // Total duration in minutes
  language      String          @default("ru")
  isPublished   Boolean         @default(false)
  isFeatured    Boolean         @default(false)
  
  // Course Structure
  freeContentLimit  Int         @default(3)     // Free content limit
  totalSessions     Int         @default(0)     // Total sessions count
  totalDuration     Int         @default(0)     // Total duration in minutes
  
  // Approval workflow
  approvalStatus  CourseApprovalStatus @default(PENDING)
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  instructorId  String
  categoryId    String

  // Relations
  instructor    User            @relation("CourseInstructor", fields: [instructorId], references: [id])
  category      Category        @relation(fields: [categoryId], references: [id])
  sessions      CourseSession[] // Course sessions
  enrollments   Enrollment[]
  payments      Payment[]
  reviews       Review[]
  certificates  Certificate[]
  lessons       Lesson[]        // Backward compatibility

  @@map("courses")
}

model CourseSession {
  id          String    @id @default(cuid())
  courseId    String
  title       String
  description String?
  order       Int
  isFree      Boolean   @default(false)
  duration    Int?      // Session duration in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  contents    SessionContent[]
  progress    SessionProgress[]

  @@map("course_sessions")
}

model SessionContent {
  id                String      @id @default(cuid())
  sessionId         String
  type              ContentType
  title             String
  description       String?
  youtubeUrl        String?     // For VIDEO type
  zoomLink          String?     // For LIVE_SESSION type
  quizData          Json?       // For QUIZ type
  exerciseContent   String?     // For EXERCISE type
  materialUrl       String?     // For DOCUMENT/AUDIO type
  order             Int
  duration          Int?        // Content duration in minutes
  isFree            Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  session           CourseSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  quizAttempts      QuizAttempt[]

  @@map("session_contents")
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  slug        String
  description String?
  content     String?
  videoUrl    String?
  duration    Int?
  order       Int        @default(0)
  isPublished Boolean    @default(false)
  isFree      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  materials   Material[]
  progress    Progress[]

  @@unique([courseId, slug])
  @@map("lessons")
}

model Material {
  id        String   @id @default(cuid())
  title     String
  filename  String
  fileUrl   String
  fileSize  Int?
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("materials")
}

model Enrollment {
  id                String    @id @default(cuid())
  enrolledAt        DateTime  @default(now())
  completedAt       DateTime?
  progress          Float     @default(0)
  isCompleted       Boolean   @default(false)
  certificateIssued Boolean   @default(false)
  enrollmentType    EnrollmentType @default(FREE)
  userId            String
  courseId          String
  
  // Relations
  course            Course    @relation(fields: [courseId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
  sessionProgress   SessionProgress[]

  @@unique([userId, courseId])
  @@map("enrollments")
}

model SessionProgress {
  id           String    @id @default(cuid())
  enrollmentId String
  sessionId    String
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  timeSpent    Int       @default(0) // in seconds
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  session      CourseSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, sessionId])
  @@map("session_progress")
}

model Progress {
  id              String    @id @default(cuid())
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  watchedDuration Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  lessonId        String
  lesson          Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@map("progress")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  studentId String
  contentId String
  answers   Json     // Student answers
  score     Float    // 0-100
  passed    Boolean  @default(false)
  attemptAt DateTime @default(now())

  // Relations
  student   User           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  content   SessionContent @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("IDR")
  status        PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  paidAt        DateTime?
  
  // Xendit Integration
  xenditPaymentId String?
  xenditInvoiceId String?
  xenditStatus    String?
  xenditCallback  Json?
  
  // Revenue Sharing
  instructorShare Decimal?     @db.Decimal(10, 2)
  platformShare   Decimal?     @db.Decimal(10, 2)
  payoutStatus    PayoutStatus @default(PENDING)
  payoutAt        DateTime?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  courseId      String
  
  // Relations
  course        Course        @relation(fields: [courseId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model InstructorSettings {
  id                    String   @id @default(cuid())
  instructorId          String   @unique
  revenueSharePercent   Decimal  @db.Decimal(5, 2) // 0-100
  setBy                 String   // Admin ID
  setAt                 DateTime @default(now())
  notes                 String?
  isActive              Boolean  @default(true)

  // Relations
  instructor            User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@map("instructor_settings")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("reviews")
}

model Certificate {
  id                String   @id @default(cuid())
  certificateNumber String   @unique
  issuedAt          DateTime @default(now())
  userId            String
  courseId          String
  course            Course   @relation(fields: [courseId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("certificates")
}

// Enums
enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum CourseStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
  PUBLISHED
  ARCHIVED
}

enum CourseApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ContentType {
  VIDEO
  QUIZ
  EXERCISE
  LIVE_SESSION
  DOCUMENT
  AUDIO
}

enum EnrollmentType {
  FREE
  PAID
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
}